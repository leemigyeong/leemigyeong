import matplotlib.pyplot as plt
import numpy as np


def compute_arm_config(link1_length, link2_length, joint0_angle, joint1_angle):
    joint1_x = link1_length * np.cos(joint0_angle)
    joint1_y = link1_length * np.sin(joint0_angle)
    p2_x = joint1_x + link2_length * np.cos(joint1_angle + joint0_angle)
    p2_y = joint1_y + link2_length * np.sin(joint1_angle + joint0_angle)
    return joint1_x, joint1_y, p2_x, p2_y

link1_length = np.random.random()
link2_length = np.random.random()
joint0_angle = np.random.random() * 2 * np.pi
joint1_angle = np.random.random() * 2 * np.pi

joint1_x, joint1_y, p2_x, p2_y = compute_arm_config(link1_length, link2_length, joint0_angle, joint1_angle)

print("p2_x = ", round(p2_x,2), "p2_y = ", round(p2_y,2))
base_x = 0
base_y = 0
plt.plot([base_x, joint1_x, p2_x],[base_y, joint1_y, p2_y])
plt.plot(base_x,base_y,'bo-')
plt.plot(joint1_x, joint1_y,'bo-')
plt.plot(p2_x,p2_y,'bo-')  # 'bo' = blue maker and solid line
plt.show()

# Define a function to compute the arm configuration
# NOTE: joint1_angle is the angle counterclockwise from the link1 axis
#def compute_arm_config(link1_length, link2_length, joint0_angle, joint1_angle):
    # TODO: compute the (x, y) position of the p1 joint and the end effector at p2.  
    #  joint1_x = 
    #  joint1_y =
    #  p2_x =
    #  p2_y =
    #return joint1_x, joint1_y, p2_x, p2_y